"use strict";(self.webpackChunkrobinlinacre=self.webpackChunkrobinlinacre||[]).push([[8390],{5202:function(e,t,n){n.r(t),n.d(t,{Head:function(){return l}});var a=n(1151),r=n(7294),o=n(7506),i=n(7825);const l=e=>r.createElement(i.H,{frontmatter:e.pageContext.frontmatter});function s(e){const t=Object.assign({h1:"h1",h2:"h2",p:"p",h3:"h3",a:"a",em:"em",ul:"ul",li:"li",code:"code"},(0,a.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h1,null,"SQL should be the default choice for data transformation logic"),"\n",r.createElement(t.h2,null,"Summary"),"\n",r.createElement(t.p,null,"SQL should be the first option considered for new data engineering work. It’s robust, fast, future-proof and testable. With a bit of care, it’s clear and readable. A new SQL engine - DuckDB - makes SQL competitive with other high performance dataframe libraries, making SQL a good candidate for data of all sizes."),"\n",r.createElement(t.h2,null,"Introduction"),"\n",r.createElement(t.p,null,"My first exposure to analytics programming was using SQL in Microsoft Access in the early 2000s. Later, I became a data scientist, and loved pandas and dplyr for their expressiveness and power. As a data engineer, I dabbled in PySpark. Most recently, I’ve returned to SQL for data manipulation."),"\n",r.createElement(t.p,null,"These alternative tools were developed to address deficiencies in SQL, and they are undoubtedly better in certain respects. But overall, I’m convinced that SQL is better in most circumstances, especially when working in a team or on long-term projects."),"\n",r.createElement(t.p,null,"This post will make the case for SQL. I’ll then suggest when other tools may be preferable. Finally, I’ll finish by mentioning some future directions, and new libraries to keep an eye on."),"\n",r.createElement(t.h2,null,"Advantages of SQL"),"\n",r.createElement(t.h3,null,"More people will be able to understand your code"),"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://peps.python.org/pep-0008/#:~:text=code%20is%20read%20much%20more%20often%20than%20it%20is%20written"},"Code is read more often than it is written"),". By using SQL, a much wider range of people can read your code, including BI developers, business analysts, data engineers and data scientists."),"\n",r.createElement(t.p,null,"Data engineering pipelines have a habit of sticking around for many years, and SQL has stood the test of time. It is the language most likely to still be understood 10 or even 20 years from now."),"\n",r.createElement(t.p,null,"SQL is also ",r.createElement(t.a,{href:"https://dev.to/ruizb/declarative-vs-imperative-4a7l#:~:text=Declarative%20programming%20is%20a%20paradigm,which%20mutate%20the%20program's%20state."},"declarative")," - meaning the author describes what results they want, rather than ",r.createElement(t.em,null,"how")," to compute them, meaning it’s arguably closer to self-documenting than some other imperative data processing languages."),"\n",r.createElement(t.h3,null,"Future proofed, with automatic speed improvements and ‘autoscaling’"),"\n",r.createElement(t.p,null,"Despite having been around since the 1970s, SQL-based tools have been one of the most active areas of innovation in data tooling in the past decade. Data pipelines written in SQL are capable of running much faster, and on larger data than would have been possible a decade ago, with little or no changes in the underlying SQL code."),"\n",r.createElement(t.p,null,"In addition to continuous improvements in more traditional SQL engines, we’ve seen the advent of distributed tools like ",r.createElement(t.a,{href:"https://github.com/apache/spark"},"Spark")," and ",r.createElement(t.a,{href:"https://github.com/prestodb/presto"},"Presto "),"that have enabled SQL to run on huge datasets. More recently, ",r.createElement(t.a,{href:"https://github.com/duckdb/duckdb"},"DuckDB")," enables extremely fast parallelised analytics queries on a single machine - competitive with some of the fastest alternatives such as ",r.createElement(t.a,{href:"https://github.com/Rdatatable/data.table"},"data.table")," and ",r.createElement(t.a,{href:"https://github.com/pola-rs/polars"},"polars"),", and able ",r.createElement(t.a,{href:"https://duckdb.org/2021/06/25/querying-parquet.html"},"to operate directly")," on csv and ",r.createElement(t.a,{href:"https://www.robinlinacre.com/parquet_api/"},"parquet files"),". If you’re using any non-standard features of a particular flavour of SQL, ",r.createElement(t.a,{href:"https://github.com/tobymao/sqlglot"},"SQLGlot")," allows automatic translation."),"\n",r.createElement(t.p,null,"Overall, SQL is probably the most future-proof tool for writing data pipelines - which have a habit of sticking around for longer than expected. Whilst there are many competitors, SQL is the most likely to be still in use in 20 years time."),"\n",r.createElement(t.h3,null,"Make data typing someone else’s problem"),"\n",r.createElement(t.p,null,"Experienced data engineers will know data types (datetimes, strings, etc.) can be a notorious time sink. The main problem is the lack of one-to-one mappings between data types in different programming languages and SQL engines. A secondary problem is that some tools such as pandas and sqlite do not enforce data type constraints - meaning a column can have a mix of data types."),"\n",r.createElement(t.p,null,"Use of SQL mitigates these problems because SQL engines are usually strongly typed. The ecosystem also provides tools that go further: Apache Arrow ",r.createElement(t.a,{href:"https://towardsdatascience.com/a-gentle-introduction-to-apache-arrow-with-apache-spark-and-pandas-bb19ffe0ddae"},"seeks to address")," this challenge by enabling robust and consistent handling of data types across different tools (such as R, Python and different databases). By choosing SQL engines that are compatible with Arrow, many of these problems of compatibility of data typing between tools disappear."),"\n",r.createElement(t.h3,null,"Simpler maintenance, with less dependency management"),"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://packaging.python.org/en/latest/tutorials/managing-dependencies/"},"Dependency management")," adds a significant maintenance burden to data pipelines and means maintainers need additional skills. Whilst the use of SQL does not eliminate the problem, it simplifies it considerably since SQL syntax changes much less frequently, and requires few dependencies to run."),"\n",r.createElement(t.p,null,"For example, a pipeline written in R or Python five years ago could require days or even weeks of work to bring up to date. It’s likely to take significant effort to set up an environment to even run the code. The same pipeline written in SQL would need far fewer changes to bring up to date, and a reader seeking to simply understand the code could easily execute the SQL without setting up a new development environment."),"\n",r.createElement(t.p,null,"SQL can also be executed from almost any programming language, making it easier to migrate pipelines to different tools, or to embed logic in other applications."),"\n",r.createElement(t.h3,null,"Compatibility with good practice software engineering"),"\n",r.createElement(t.p,null,"Many data engineers will be familiar with the pain of uncovering an incomprehensible thousand-line SQL script that was written a decade ago, but is a critical part of an organisation’s data pipelines. Or the challenges of making small changes to Spark SQL pipelines that run on huge volumes of data. Overall, historically it has been challenging to write SQL that aligns to good engineering practice - such as clear, concise, and tested code that is split out into easily digestible components."),"\n",r.createElement(t.p,null,"Some of these challenges are now much easier to overcome with the use of three components:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://duckdb.org/"},"DuckDB"),", a zero-dependency SQL engine optimised for analytics queries that can be used to run unit tests, and more generally makes it much more ergonomic to rapidly iterate SQL code"),"\n",r.createElement(t.li,null,"CTEs (Common Table Expressions) - a way of splitting up large queries into multiple semantically meaningful parts, which can be tested individually. These tests can form part of your CI pipelines"),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://github.com/tobymao/sqlglot"},"SQLGlot"),", a SQL transpilation engine, that allows you to more easily test your code in DuckDB even if it’s written against a different target engine (e.g. PySpark)."),"\n"),"\n",r.createElement(t.p,null,"There are even tools such as ",r.createElement(t.a,{href:"https://github.com/dbt-labs/dbt-core"},"dbt")," which take similar ideas and compose them into a framework."),"\n",r.createElement(t.h3,null,"SQL is more expressive and versatile than it used to be"),"\n",r.createElement(t.p,null,"Modern SQL engines have support for a range of functions that make complex operations much simpler than they used to be, addressing earlier shortcomings:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"There’s now the ",r.createElement(t.a,{href:"https://duckdb.org/docs/sql/functions/nested.html"},"ability to store and operate on nested data structures"),", including writing arbitrary lambda functions to process these structures"),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://www.postgresql.org/docs/current/tutorial-window.html"},"Window functions")," have been around a long time, but are extremely powerful"),"\n"),"\n",r.createElement(t.p,null,"Other features with more narrow applications include full text search, geospatial functions, PIVOT operations and user defined functions - though these should be used with care because they have limited support."),"\n",r.createElement(t.h2,null,"Situations in which SQL may be inappropriate"),"\n",r.createElement(t.p,null,"When may there be a strong argument for using other tools? I’ve argued in this post that SQL will often enable you to write pipelines which are simple, readable and easy to test. And where the totality of code and infrastructure is comparatively simple and maintainable in the long run."),"\n",r.createElement(t.p,null,"But there are some situations where the opposite is true. For example, to interpolate a time series in pandas, you can use the ",r.createElement(t.code,null,"resample")," method - a single line of code, where the intention is clear. In many SQL engines, the equivalent SQL is more complex and difficult to read. Similarly, SQL is probably not the best tool to operate on graph-like data structures."),"\n",r.createElement(t.p,null,"Ultimately SQL should not be the only tool you consider - but I suggest a presumption against other tools without a strong justification."),"\n",r.createElement(t.h2,null,"Putting it all together: Why I wrote Splink using SQL"),"\n",r.createElement(t.p,null,"Part of the motivation for writing this post is the success I’ve had in using SQL to power ",r.createElement(t.a,{href:"http://github.com/moj-analytical-services/splink"},"Splink"),", a library for probabilistic record linkage at scale. All the core computations are written in SQL."),"\n",r.createElement(t.p,null,"This has the following advantages:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Splink is able to support multiple execution backends: workloads can be executed using DuckDB, SQLite, Spark or AWS Athena (Presto). DuckDB is by far the fastest option for small to medium size data, but Spark and Athena are available for very large jobs that need a distributed backend. This means that Splink is optimised for a wide variety of scenarios without the team having to maintain any of that execution logic."),"\n",r.createElement(t.li,null,"Splink is future-proofed. If a new SQL engine comes along that’s faster, we can support it by writing a small adaptor. In fact, that’s exactly what happened with DuckDB."),"\n",r.createElement(t.li,null,"Once a model is trained, Splink is able to output SQL code that expresses the model, enabling the logic to be embedded in other applications without Splink being a dependency. In this way, a Splink model could be productionised e.g. in dbt!"),"\n",r.createElement(t.li,null,"All SQL outputted by Splink is outputted as a step-by-step ",r.createElement(t.a,{href:"https://www.postgresql.org/docs/current/queries-with.html"},"CTE")," pipeline. This makes it easy to understand and unit test each part of the algorithm, making its inner workings much less of a black box."),"\n"),"\n",r.createElement(t.p,null,"This has all been possible despite the need to express some fairly complex iterative algorithms (such as the Expectation Maximisation algorithm) using SQL."),"\n",r.createElement(t.h2,null,"Future trends"),"\n",r.createElement(t.p,null,"Far from becoming outdated, SQL is going from strength to strength."),"\n",r.createElement(t.p,null,"One interesting trend is the development of alternative APIs that ‘compile down’ to SQL for execution. The idea here is that SQL engines are so well optimised that library authors are better reusing this work than writing their own execution logic."),"\n",r.createElement(t.p,null,"Some interesting things I have an eye on:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://github.com/malloydata/malloy"},"Malloy")," promises to offer a clearer and more concise declarative alternative to SQL that compiles to SQL."),"\n",r.createElement(t.li,null,"Similarly, ",r.createElement(t.a,{href:"https://ibis-project.org/docs/4.1.0/"},"Ibis")," offers a replacement API for SQL queries which is more familiar to Python users, but ‘compiles down’ to SQL for execution against its supported backends. ",r.createElement(t.a,{href:"https://github.com/tidyverse/dbplyr"},"Dbplyr")," is similar in R. Polars ",r.createElement(t.a,{href:"https://github.com/pola-rs/polars/pull/4967"},"allows the execution of SQL"),", though it looks like the SQL is transpiled in ",r.createElement(t.a,{href:"https://github.com/pola-rs/polars/pull/4967#issuecomment-1279160653"},"the opposite direction"),"."),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://github.com/tobymao/sqlglot"},"SQLGlot")," has the potential for lots of interesting applications such as ",r.createElement(t.a,{href:"https://twitter.com/Captaintobs/status/1619185992111624197"},"keeping track of lineage"),". It seems possible that it might be used in future as a tool to re-write a CTE pipeline to improve the efficiency of operation without changing its meaning (since ",r.createElement(t.a,{href:"https://twitter.com/A_n_Elk/status/1615495328077352960?s=20"},"CTEs can sometimes be bad for performance"),")."),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://github.com/dbt-labs/dbt-core"},"dbt")," has gained widespread adoption for data engineering. I’m particularly interested in future directions such as functions that can provide more information about lineage, or that introspect the SQL and improve the efficiency of execution"),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://github.com/pola-rs/polars#sql"},"Polars")," is a fast DataFrame library that supports SQL with a Python API."),"\n"))}t.default=function(e){return void 0===e&&(e={}),r.createElement(o.fE,e,r.createElement(s,e))}},137:function(e,t,n){n.d(t,{A:function(){return c},Z:function(){return m}});var a=n(7294),r=n(4160),o=n(9583);var i=e=>{let{text:t,IconComponent:n,route:o}=e;const{0:i,1:l}=(0,a.useState)(null);return(0,a.useEffect)((()=>{if("undefined"!=typeof window){l(window.innerWidth);const e=()=>l(window.innerWidth);return window.addEventListener("resize",e),()=>{window.removeEventListener("resize",e)}}}),[]),null===i?null:a.createElement("div",null,a.createElement(r.rU,{to:o,className:"text-gray-600 hover:text-blue-700 transition ease-in duration-200"},i>500?t:a.createElement(n,{className:"w-4.5 h-4.5"})))};var l=()=>a.createElement("div",null,a.createElement("div",{className:"flex justify-between items-center py-4"},a.createElement("div",{className:"flex items-center space-x-4"},a.createElement("div",{className:"text-base font-mono font-semibold shimmer-text"},a.createElement(r.rU,{to:"/",className:"text-base font-mono font-bold shimmer-text"},">robinlinacre"))),a.createElement("div",{className:"flex items-center space-x-3"},a.createElement(i,{text:"Home",IconComponent:o.xng,route:"/"}),a.createElement(i,{text:"About",IconComponent:o.DAO,route:"/about"}),a.createElement("a",{href:"https://twitter.com/robinlinacre",className:"text-gray-600 hover:text-blue-700 transition ease-in duration-200",target:"_blank",rel:"noopener noreferrer"},a.createElement(o.fWC,{className:"w-4.5 h-4.5"})),a.createElement("a",{href:"https://github.com/robinl",className:"text-gray-600 hover:text-blue-700 transition ease-in duration-200",target:"_blank",rel:"noopener noreferrer"},a.createElement(o.hJX,{className:"w-4.5 h-4.5"})),a.createElement("a",{href:"https://www.linkedin.com/in/robinlinacre/",className:"text-gray-600 hover:text-blue-700 transition ease-in duration-200",target:"_blank",rel:"noopener noreferrer"},a.createElement(o.ltd,{className:"w-4.5 h-4.5"})))),a.createElement("hr",{className:"border-gray-300 mb-4"}));var s=()=>a.createElement("div",{className:"text-center"},a.createElement("hr",{className:"border-gray-300"}),a.createElement("footer",{className:"mt-4"},a.createElement("p",{className:"text-sm text-gray-500"},a.createElement("a",{href:"/"},"Back home")),a.createElement("p",{className:"text-sm text-gray-500"},"This site is built using"," ",a.createElement("a",{href:"https://observablehq.com"},"Observable HQ")," and"," ",a.createElement("a",{href:"https://gatsbyjs.org"},"Gatsby.js"),". Source code"," ",a.createElement("a",{href:"https://github.com/robinl/robinlinacre"},"here"),".")));function c(e){let{children:t,pageContext:n,className:r}=e;return a.createElement(a.Fragment,null,a.createElement("div",{className:r||"text-base mx-auto w-full max-w-prose px-4"},a.createElement(l,null),a.createElement("div",null,t),a.createElement(s,null)))}var m=c},7506:function(e,t,n){n.d(t,{fE:function(){return c},pY:function(){return m}});var a=n(7294),r=n(1151),o=n(137);var i=e=>{let{frontmatter:t}=e;const{post_date:n,code_url:r,post_latest_update:o}=t;let i="View source code for this page";return r.includes("observablehq.com")&&(i="Live edit this notebook"),a.createElement("p",{className:"text-gray-400 text-sm"},"Originally posted: ",n,"."," ",o&&" Last updated: "+o+"."," ",i," ",a.createElement("a",{href:r,target:"_blank",rel:"noopener noreferrer",className:"text-blue-600 text-sm"},"here."))},l=n(5589);const s={pre:e=>a.createElement("div",e),code:e=>{let{children:t,className:n}=e;if(!n)return a.createElement("code",null,t);const r=n.replace(/language-/,"");return a.createElement("div",{className:"mb-8 mt-8"},a.createElement(l.y$,{code:t.trim(),language:r,theme:l.np.vsDark},(e=>{let{className:t,style:n,tokens:r,getLineProps:o,getTokenProps:i}=e;return a.createElement("pre",{className:t,style:{...n,padding:"20px",fontSize:"0.8em"}},r.map(((e,t)=>a.createElement("div",Object.assign({key:t},o({line:e,key:t})),e.map(((e,t)=>a.createElement("span",Object.assign({key:t},i({token:e,key:t})))))))))})))}};function c(e){let{children:t,pageContext:n}=e;const{frontmatter:l}=n;return a.createElement(o.Z,null,a.createElement(r.Zo,{components:s},a.createElement(i,{frontmatter:l}),a.createElement("div",{id:"mdx-container-div"},t)))}function m(e){let{children:t,pageContext:n}=e;const{frontmatter:l}=n;return a.createElement(o.Z,{className:"text-base mx-auto w-full max-w-screen-lg px-4"},a.createElement(r.Zo,{components:s},a.createElement(i,{frontmatter:l}),a.createElement("div",{id:"mdx-container-div"},t)))}},7825:function(e,t,n){n.d(t,{H:function(){return o}});var a=n(7294),r=n(4160);const o=e=>{let{frontmatter:t}=e;const{title:n,description:o,image:i,siteUrl:l,twitterUsername:s}=(0,r.K2)("1865044719").site.siteMetadata,c={title:(null==t?void 0:t.title)||n,description:(null==t?void 0:t.description)||o,image:""+l+((null==t?void 0:t.image)||i),url:""+l+((null==t?void 0:t.pathname)||""),twitterUsername:s,...t};return a.createElement(a.Fragment,null,a.createElement("title",null,c.title),a.createElement("meta",{name:"description",content:c.description}),a.createElement("meta",{name:"image",content:c.image}))}},4405:function(e,t,n){n.d(t,{w_:function(){return c}});var a=n(7294),r={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},o=a.createContext&&a.createContext(r),i=function(){return i=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},l=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n};function s(e){return e&&e.map((function(e,t){return a.createElement(e.tag,i({key:t},e.attr),s(e.child))}))}function c(e){return function(t){return a.createElement(m,i({attr:i({},e.attr)},t),s(e.child))}}function m(e){var t=function(t){var n,r=e.attr,o=e.size,s=e.title,c=l(e,["attr","size","title"]),m=o||t.size||"1em";return t.className&&(n=t.className),e.className&&(n=(n?n+" ":"")+e.className),a.createElement("svg",i({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},t.attr,r,c,{className:n,style:i(i({color:e.color||t.color},t.style),e.style),height:m,width:m,xmlns:"http://www.w3.org/2000/svg"}),s&&a.createElement("title",null,s),e.children)};return void 0!==o?a.createElement(o.Consumer,null,(function(e){return t(e)})):t(r)}},1151:function(e,t,n){n.d(t,{Zo:function(){return l},ah:function(){return o}});var a=n(7294);const r=a.createContext({});function o(e){const t=a.useContext(r);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const i={};function l({components:e,children:t,disableParentContext:n}){let l;return l=n?"function"==typeof e?e({}):e||i:o(e),a.createElement(r.Provider,{value:l},t)}}}]);
//# sourceMappingURL=component---src-mdx-recommend-sql-mdx-930af11d5592f2b0b787.js.map